use video
db.movies.insertOne({"title":"Jaws","year":1975,"imdb":"tt0073195"})
db.movies.find()
db.movies.find().pretty()
db.movies.find("year":1981).pretty()
--the returning object is a cursor
var c=db.movies.find()
c.hasNext()
c.next()


db.names.findOne()
db.names.find()

var j=db.names.findOne()
j
j.name='jw'
db.names.save(j)


--------------------
Create 
  insertOne()
  insertMany()
    ordered --insert in an ordered way, error out once see error, the rest will not be inserted
    non-ordered --will skip errorous record, the rest will be inserted
  update commands("upserts")
--------------------
_id
  if you don't suply one, it will creat one
  12-Bytes hex string
  ----|---|--|---   date|Mac address|ProcessID|Counter
  index
--------------------
Reading Documents
  Equality matches
    Scalars fields: db.movieDetails.find({rated:"PG-13",year:2009}).count()
    Embeded documents fields:db.movieDetails.find({"tomato.meter":100})
    Arrays fields:db.movieDetails.find({"writters":["Ethan Coen","Joel Coen"]}),
                  db.movieDetails.find({"actors":"Jeff Bridges"}),
                  db.movieDetails.find({"actors.0":"Jeff Bridges"})
                                 
  Cursors
    note Mongo Shell return result in batches
    1st batch 1mb, 2nd and later 4mb
    type "it" for more
    
  Projection --limiting fields
    db.moviesDetails.find({rated:"PG"},{title:1, _id:0})
   
   Comparison Operators
   
   Element Operators
    $exists:db.movieDetails.find({"tomato.meter":{$exist:true}})
    $type:db.moviesScratch.find({"_id":{$type:"string"}).pretty
   
   Logical operators
   Regex Operator
   Array Operators
   -------------------------------
   Update
    UpdateOne: 
      db.movieDetails.updateOne({title:"the Martian"},{$set:{poster:"http://xyz"}})
      db.movieDetails.updateOne({title:"the Martian"},{$inc:{"tomato.reviews":3,"tomato.userReviews":25}})
      db.movieDetails.updateOne({title:"the Martian"},{$push:{reviews:{rating:4.5,reviewer:"James",text:"great"}}})
      db.movieDetails.updateOne({title:"the Martian"},{$push:{reviews:{$each:[{rating:4.5,reviewer:"James"},{rating:5,reviewer:"Nikki"}]}}})
      db.movieDetails.updateOne({title:"the Martian"},{$push:{reviews:{$each:[{rating:4.5,reviewer:"James"},{rating:5,reviewer:"Nikki"}],
      $position:0,$slice:5}}})
    UpdateMany
      db.movieDetails.updateOne({rated:""},{$unset:{rated:""}}})
    Upsert
      db.movieDetails.updateOne({"imdb.id":detail.imdb.id},{$set:detail},{upsert:true})  --detail is a document
    ReplaceOne
      db.movieDetails.replaceOne({"imdb":detail.imdb.id},detail)  --to replace a document in a collection
